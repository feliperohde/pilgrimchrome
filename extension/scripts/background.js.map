{"version":3,"sources":["source/_scripts/node_modules/browser-pack/_prelude.js","source/_scripts/source/_modules/pilgrim/pilgrim.js","source/_scripts/source/_scripts/background.js"],"names":[],"mappings":"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","file":"background.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","export default class Pilgrim {\n  constructor(options) {\n    console.log('Pilgrim module');\n\n    var defaults = {\n\n      cookies: [],\n      isSyncedCookies: false,\n\n      domain: 'http://pilgrim.itelios.net',\n\n      watchDomain: 'itelios.atlassian.net/browse/', //'dominio para ouvir e procurar tasks'\n\n\n      tasks: [],\n      localStorageTasks: {},\n\n      getGroupTaskUri: 'http://pilgrim.itelios.net/Task/getGroupTasks', /*\n\n      post\n      headers:\n      query: ?prjId=3995797f-9a8a-4d36-8f01-079c6edb4f24\n      {\n\n      }\n\n\n       */\n      createTask: 'http://pilgrim.itelios.net/Task/Create/' /*\n\n      post\n      headers:\n      data:\n      {\n        ProjectID: '95e09e2b-a45b-4113-8d92-79abfb881441' // interno,\n        cbPrjModeID: 1,\n        IsChecked: 0,\n        TaskGroupID: 'c9ebb70c-2789-4ca6-9df9-1b6bd80dcc49' // tarefas nao faturadas\n        TimeSheetDate: 22/05/2017,\n        Name: 'nome da task',\n        taskStartDate: '23/05/2017 00:00:00',\n        taskEndDate: '24/05/2017 00:00:00',\n        PlannedWork: 20\n      }\n\n      */\n\n    };\n\n    this.options = Object.assign({}, defaults, options);\n\n    //métodos expostos\n    this.listem =  this._listemEvents;\n\n  };\n\n  _checkExists (task) {\n\n    for (var i = this.options.tasks.length - 1; i >= 0; i--) {\n\n      if(this.options.tasks[i].key === task.key)\n        return true\n    }\n  };\n\n  _addToList (task) {\n\n    if(!this._checkExists(task)) {\n      this.options.tasks.push(task);\n\n      // Put the object into storage\n      localStorage.setItem('tasks', JSON.stringify(this.options.tasks));\n    }\n\n    console.log(this.options.tasks);\n\n  };\n\n  _verifyLocalStorage () {\n\n    console.log('verificando o localStorage');\n\n    this.options.localStorageTasks = JSON.parse(localStorage.getItem('tasks'));\n\n    if(this.options.localStorageTasks != null && this.options.localStorageTasks.length > 0 ){\n      this.options.tasks = this.options.localStorageTasks;\n    } else {\n      localStorage.setItem('tasks', JSON.stringify(this.options.tasks));\n    }\n\n    console.log(this.options.tasks);\n\n  };\n\n  _listemEvents () {\n\n    chrome.runtime.onMessage.addListener(function(request, sender, sendResponse) {\n\n      console.log(request);\n\n      switch(request.method) {\n        case 'syncTasks':\n          this._postTasks();\n\n        break;\n\n        case 'receiveTasks':\n          this._receiveTasks(request.args.list);\n\n        case 'addToList':\n          this._addToList(request.args.task);\n\n        case 'up':\n          this._up();\n\n        break;\n\n\n        default:\n          console.log('Invalid...');\n      }\n\n\n    }.bind(this));\n\n  };\n\n  _up () {\n\n    this._syncCookies(function (data) {\n      this.options.isSyncedCookies = true;\n\n      this._verifyLocalStorage();\n\n      //devolvemos para o content uma mensagem com a lista de tarefas que estão em memória\n      this._sendTaskToContent();\n\n    }.bind(this));\n\n\n\n    console.log('pronto para sincronizar e fazer qqr coisa no pilgrim...');\n  };\n\n\n  _sendTaskToContent () {\n    chrome.tabs.query({active: true, currentWindow: true}, function(tabs) {\n\n      console.log('tabs');\n      console.log(tabs);\n      chrome.tabs.sendMessage(tabs[0].id, {method: \"taskList\", args: {tasks: this.options.tasks}}, function(response) {\n        console.log(response);\n      });\n    }.bind(this));\n  };\n\n  _receiveTasks (list) {\n\n    if(!list.length) return;\n\n    this.options.tasks = list;\n\n  };\n\n  _getCookie (name) {\n      for (var i = this.options.cookies.length - 1; i >= 0; i--) {\n\n        if(this.options.cookies[i].name === name)\n          return this.options.cookies[i];\n      }\n  };\n\n  _getAllCookies (domain, callback) {\n      chrome.cookies.getAll({\"url\": domain}, function(allCookies) {\n          if(callback) {\n              callback(allCookies);\n          }\n      });\n  };\n\n  _syncCookies (callback) {\n\n    this._getAllCookies(this.options.domain, function (data) {\n\n      this.options.cookies = data;\n\n      if(callback) {\n        callback(data);\n      }\n\n    }.bind(this));\n\n  };\n\n  //simula um post no pilgrim para cadastrar uma task inexistente\n  _postTask (task) {\n\n    console.log(task);\n\n    let cookie_lang =  this._getCookie('Language');\n    let cookie_pilgrimAuthCookie = this._getCookie('pilgrimAuthCookie');\n    let cookie_ASPXROLES = this._getCookie('.ASPXROLES');\n\n    // let header_cookie = \"Language=En; pilgrimAuthCookie=605E4E05C66E45307CB1DE8F875EA2ABA6633429838B6E0F19E9C9EAFF2DDBAF79BC7BF24EBDC4B38AD2ECADD91E6208A93FF5268FD976DB8CCF450CC59C96F148FE0746A610B681BB87F281601E1988B4703F2235096A403C61A4D1E24C245611F420735F6CDF303F6A02E4885435E446DEC5C3E782E84C3BD60BB7150A7FFDC783BB7C12833D41A5295E14BD5585A3; .ASPXROLES=_s0efXAmrBdhKQDLi0X-BuRzF8wK-i0dJ-FDGyCVuun6q06qjOZB2xfzsBbp2a5FWvd87BZnZxuoyTohRhB4W6zIOjND1-Xj1F_Xs25DbJMCXcL6-DIcJABNiAV2z0aR2tkmPnUd-k6Jx7RjfbosxHboUR0E1XLQjbAitxijG75jwsmbxjIzSXCwvHxJiPDAXrgPVaFFjpSfwXx88pNaDxaD_UMygiyI3EwBSrdzNnt1NcsRpCkTaqIMmrllBVReJ8qqKzSShd4frBVJ84btJMcKm1pb-XK-SppX-6T5ANxx62XFY4c1u1SbqDvCVH2eX2Di46KcIBR7wpHbkSppMGoHNHaOHTGNc0qQADXYnHvTipaRbvNCk2nCYbpOh0SlYgU0FBSyIYXVULRQ6z2vPx49dLdQEdoq2kAloZQa3HVxcbDY1qEfVzVEcoDJwfNxraouIpvdRi4TZDAz7WDHJKAtFm_ukYWqHevUo13chHzJ-mzG_XbmFP_Xqy_8-aMfkP_oEU5gxO1J47LLIrzDXut3C1kzn9f2VjDHxQZXLFnfyPbtrPlbAxaEQ7xBy1mME1ys3X8cPnqd4itcK5sWSulAz7zJrNStcsTFTjOgPh4fh6vnGvhpIdw5eW8rNMRIP2ASfljVrsvjlLYQ6Giza2nWETE6LQEusSKa_ScD0PJvbvLJTqgmMwC8uXm7L3951GYnDg03PA_n2Wl5rMjeRp1jtkN_rfgDyhbtFSqL_q_HfGcgJiM7lr8IjeEKre36WNQBloeUuWiAKmRrSXQ9dQVFZ-MWbdVtDmMXsrh5lbuXgxggcr9GbhgUxiBqjFIJ0\"\n    let header_cookie = \"Language=\" + cookie_lang.value + \"; pilgrimAuthCookie=\" + cookie_pilgrimAuthCookie.value + \"; .ASPXROLES=\" + cookie_ASPXROLES.value + \"\"\n\n    let myheaders = {\n      'Accept': '*/*',\n      'Accept-Encoding': 'gzip, deflate, sdch',\n      'Accept-Language': 'en-US,en;q=0.8',\n      'X-Requested-With': 'XMLHttpRequest',\n      'Cookie': header_cookie\n    };\n\n    let body = {\n      ProjectID: '95e09e2b-a45b-4113-8d92-79abfb881441', // interno,\n      cbPrjModeID: 1,\n      IsChecked: 0,\n      TaskGroupID: 'c9ebb70c-2789-4ca6-9df9-1b6bd80dcc49', // tarefas nao faturadas\n      TimeSheetDate: \"22/05/2017\",\n      Name: task.excerpt,\n      taskStartDate: '23/05/2017 00:00:00',\n      taskEndDate: '24/05/2017 00:00:00',\n      PlannedWork: 20\n    };\n\n    let myInit = {\n      method: 'POST',\n      headers: myheaders,\n      mode: 'cors',\n      body: JSON.stringify(body),\n      cache: 'default',\n      credentials: 'include'\n    };\n\n    // url (required), options (optional)\n    fetch(this.options.createTask, myInit).then(function(response) {\n\n      console.log(response);\n\n    }).catch(function(err) {\n      // Error :(\n    });\n\n  };\n\n\n  //pega uma lista de tarefas e itera mandando para o metodo postTask\n  _postTasks () {\n\n    for (var i = this.options.tasks.length - 1; i >= 0; i--) {\n      this._postTask(this.options.tasks[i]);\n    };\n\n  };\n\n}","// Main javascript entry point\n// Should handle bootstrapping/starting application\n\nimport Pilgrim from '../_modules/pilgrim/pilgrim';\n\n'use strict';\n\n\nvar pilgrim = new Pilgrim();\n\npilgrim.listem();"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}